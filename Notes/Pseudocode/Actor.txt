To redesign the actor class

this class not only implements all five systems, but also wraps around them

Actor:
	-Image		spr
	-Animator	ani
	-BBox		box
	-Vector2	pos
	-Vector2	mot
	
	Constructor
	...?
	Destructor
	
	//this updates the various elements of the actor
	//this should be called ONCE per loop
	//delta is for synced motion between different actors
	Update			(delta)
	
	//sprite manipulation
	//also handles the bounding box, and resets the animator?
	//returns 0 on success, 1 on error
	LoadSprite		(fname, width = 0, height = 0)
	SetSprite		(Image*) //direct copy: not local, set clip, compensate BBox
	SetSprite		(Surface*, width = 0, height = 0)
	UnloadSprite	()
	
	//handles the width & height of the actor, and adjusts the bounding box
	SetWidth		(w)
	SetHeight		(h)
	GetWidth		()
	GetHeight		()
	
	//assume this system:
	//    animation along the X of the spritesheet
	//    different sprites (up,down,left,right) along the Y of the spritesheet
	SetSpriteIndex	(i) //can use macros
	SetSpriteSpeed	(s)
	GetSpriteIndex	()
	GetSpriteSpeed	()
	
	//draw to the screen, and compensate for any camera input
	DrawTo			(dest, camX, camY)
	
	//this handles minor tweaks to the edges of the bounding box
	GetRealBBox		(x, y, w, h) //these are signed, and passed into the box's tweak function
	
	//can add extra stuff here to modify the BBox directly
	
	//the positon is handled by a 2D vector
	SetPosition		(x, y)
	SetPosition		(Vector2)
	SetX			()
	SetY			()
	ShiftPosition	(x, y)
	ShiftPosition	(Vector2)
	ShiftX			()
	ShiftY			()
	GetPosition		() //vec2
	GetX			()
	GetY			()
	
	//the motion is handled by a 2D vector
	SetMotion		(x, y)
	SetMotion		(Vector2)
	SetMotionX		()
	SetMotionY		()
	ShiftMotionX	()
	ShiftMotionY	()
	GetMotion		() //vec2
	GetMotionX		()
	GetMotionY		()
	
	//OO breaker (deprecated) get pointers to the members
\	GetSpr			()
\	GetAni			()
\	GetBox			()
\	GetPos			()
\	GetMot			()
	
end

-------------------------

Although the verbose option is a possibility, let's simplify it
See above for a more detailed explanation of some of these

Actor (simple):
	-Image		spr
	-Animator	ani
	-BBox		box
	-Vector2	pos
	-Vector2	mot
	
	Constructor
	Destructor
	
	Update			(delta)
	
	LoadSprite		(fname, width, height) //need to consider resource allocation at some point
	SetSprite		(surface, width, height)
	UnloadSprite	()
	
	SetWidth		(Uint16)
	SetHeight		(Uint16)
	GetWidth		()
	getHeight		()
	
	SetSpriteIndex	(Uint16)
	GetSpriteIndex	()
	
	SetSpriteSpeed	(Uint16) //frames per second
	GetSpriteSpeed	()
	
	DrawTo			(dest, camX, camY)
	
	GetRealBBox		(x, y, w, h)
	
	//can add extra stuff here to modify the BBox directly
	
	SetPosition		(Vector2) //can just pass SetPosition(Vector2(x, y)) instead of overloading
	SetX			(double)
	SetY			(double)
	
	ShiftPosition	(Vector2) //?
	ShiftX			(double)
	ShiftY			(double)
	
	GetX			()
	GetY			()
	
	SetMotion		(Vector2)
	SetMotionX		(double)
	SetMotionY		(double)
	
	ShiftMotionX	(double)
	ShiftMotionY	(double)
	
	GetMotionX		()
	GetMotionY		()
end

-------------------------

The above methods are OK as a general solution, but maybe I should make it more modular.
If I have different classes for different objects, it'd probably be ok, but am I making it
too complicated?

Actor:
	sprite
	bounding box
	animation
	position
	motion
end

The above is essentially what is in Actor, which would be the parent of these:

* Player
* NPCs
* Items (possibly)
* Monsters
* Other things I haven't thought of.

Which do I choose?

Note: in later projects, using na aggregation method from the start is probably the best option.

-------------------------

Smooth character movement (drawn from Jumpman)

Deprecated: Jumpman's logic wasn't as good as I thought. Moved this problem to "Movement Logic.txt"

TODO work animation code into this

Actor::Update(delta)
	position += motion * delta //vectors rock
	
	animator.Update(delta) //when the redesign is finished.
end



KeyDown(key):
	/* Each keypress pushes the character is a certain direction
	 * 
	 * On key press:
	 *   if shifting in a certain direction does NOT break the "speed limit" then
	 *     shift in that direction
	 *   end
	 * 
	*/
	
	//up
	if (key == up):
		if (actor.GetMotionY() - SPEED >= -SPEED): //Note: inverted values for up & left
			actor.ShiftMotonY( -SPEED )
			actor.SetFrameIndex( UP )//?
			//setting the frame index in Update would be smoother, but less portable
			//and would constrain the layout of the spritesheets even more
		end
	end
	
	//down...
	//left...
	//right...
end



KeyUp(key):
	/* Each keyrelease slows the character down, or stops the character
	 * 
	 * On key press:
	 *   if shifting in a certain direction does NOT drop below zero then
	 *     shift in that direction
	 *   else
	 *     set speed in that direction to zero
	 *   end
	 * 
	*/
	
	//up
	if (key == up):
		if (actor.GetMotionY() + SPEED <= 0): //Note: inverted values for up & left
			actor.ShiftMotionY( SPEED )
		else
			actor.SetMotionY( 0 )
		end
	end
	
	//down...
	//left...
	//right...
end

-------------------------

while running:
	while poll event:
		switch event.type:
			case QUIT:
				running = false
			
			case KEYDOWN:
				KeyDown(event.key)
			
			case KEYUP:
				KeyUp(event.key)
		end
	end
	
	update
	draw
end


KeyDown(key):
	if key == escape etc.
	
	//character movement
	if speed == 0
		if (key == up) move up
		if (key == down) move down
		if (key == left) move left
		if (key == right) move right
	end
end

KeyUp(key):
	if speed != 0
		if (key == up && movement == up) stop
		if (key == down && movement == down) stop
		if (key == left && movement == left) stop
		if (key == right && movement == right) stop
	end
end

